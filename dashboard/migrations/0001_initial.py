# Generated by Django 4.2.7 on 2025-06-22 23:17

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Dashboard',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, verbose_name='Nom du dashboard')),
                ('description', models.TextField(blank=True)),
                ('is_shared', models.BooleanField(default=False)),
                ('shared_with_roles', models.JSONField(default=list, verbose_name='Partagé avec les rôles')),
                ('layout_config', models.JSONField(default=dict, verbose_name='Configuration du layout')),
                ('refresh_interval', models.PositiveIntegerField(default=300, verbose_name='Intervalle de rafraîchissement (sec)')),
                ('theme', models.CharField(choices=[('light', 'Clair'), ('dark', 'Sombre')], default='light', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_viewed', models.DateTimeField(blank=True, null=True)),
                ('view_count', models.PositiveIntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('is_default', models.BooleanField(default=False)),
                ('is_system_dashboard', models.BooleanField(default=False)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='owned_dashboards', to=settings.AUTH_USER_MODEL)),
                ('shared_with_users', models.ManyToManyField(blank=True, related_name='shared_dashboards', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Tableau de bord',
                'verbose_name_plural': 'Tableaux de bord',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='DashboardWidget',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, verbose_name='Nom du widget')),
                ('title', models.CharField(max_length=200, verbose_name='Titre affiché')),
                ('description', models.TextField(blank=True)),
                ('widget_type', models.CharField(choices=[('metric', 'Métrique'), ('chart', 'Graphique'), ('table', 'Tableau'), ('alert', 'Alerte'), ('status', 'Statut'), ('timeline', 'Timeline')], max_length=20)),
                ('config', models.JSONField(default=dict, verbose_name='Configuration')),
                ('data_source', models.CharField(max_length=100, verbose_name='Source de données')),
                ('refresh_interval', models.PositiveIntegerField(default=300, verbose_name='Intervalle de rafraîchissement (sec)')),
                ('position_x', models.PositiveIntegerField(default=0)),
                ('position_y', models.PositiveIntegerField(default=0)),
                ('width', models.PositiveIntegerField(default=4, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)])),
                ('height', models.PositiveIntegerField(default=4, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)])),
                ('required_permission', models.CharField(blank=True, max_length=100)),
                ('visible_to_roles', models.JSONField(default=list, verbose_name='Visible aux rôles')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_system_widget', models.BooleanField(default=False)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_widgets', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Widget de tableau de bord',
                'verbose_name_plural': 'Widgets de tableau de bord',
                'ordering': ['position_y', 'position_x'],
            },
        ),
        migrations.CreateModel(
            name='SystemStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('component', models.CharField(choices=[('web_server', 'Serveur Web'), ('database', 'Base de données'), ('authentication', 'Authentification'), ('voting_system', 'Système de vote'), ('encryption', 'Chiffrement'), ('audit_system', "Système d'audit")], max_length=30, unique=True)),
                ('status', models.CharField(choices=[('operational', 'Opérationnel'), ('degraded', 'Dégradé'), ('partial_outage', 'Panne partielle'), ('major_outage', 'Panne majeure'), ('maintenance', 'Maintenance')], default='operational', max_length=20)),
                ('status_message', models.TextField(blank=True)),
                ('last_check', models.DateTimeField(auto_now=True)),
                ('next_check', models.DateTimeField(blank=True, null=True)),
                ('uptime_percentage', models.DecimalField(decimal_places=2, default=100.0, max_digits=5)),
                ('response_time_ms', models.PositiveIntegerField(default=0)),
                ('error_rate_percentage', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('last_incident', models.DateTimeField(blank=True, null=True)),
                ('incidents_count_24h', models.PositiveIntegerField(default=0)),
                ('incidents_count_7d', models.PositiveIntegerField(default=0)),
            ],
            options={
                'verbose_name': 'Statut système',
                'verbose_name_plural': 'Statuts système',
                'ordering': ['component'],
            },
        ),
        migrations.CreateModel(
            name='SystemMetric',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('metric_name', models.CharField(max_length=100, verbose_name='Nom de la métrique')),
                ('value', models.DecimalField(decimal_places=4, max_digits=15, verbose_name='Valeur')),
                ('unit', models.CharField(blank=True, max_length=20, verbose_name='Unité')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('source', models.CharField(max_length=100, verbose_name='Source')),
                ('category', models.CharField(choices=[('performance', 'Performance'), ('security', 'Sécurité'), ('availability', 'Disponibilité'), ('usage', 'Utilisation'), ('business', 'Métier')], max_length=20)),
                ('threshold_warning', models.DecimalField(blank=True, decimal_places=4, max_digits=15, null=True)),
                ('threshold_critical', models.DecimalField(blank=True, decimal_places=4, max_digits=15, null=True)),
                ('tags', models.JSONField(default=dict, verbose_name='Tags')),
            ],
            options={
                'verbose_name': 'Métrique système',
                'verbose_name_plural': 'Métriques système',
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['metric_name', 'timestamp'], name='dashboard_s_metric__fd7ced_idx'), models.Index(fields=['category', 'timestamp'], name='dashboard_s_categor_745e86_idx')],
            },
        ),
        migrations.CreateModel(
            name='ReportTemplate',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, verbose_name='Nom du template')),
                ('description', models.TextField(verbose_name='Description')),
                ('report_type', models.CharField(choices=[('security_audit', 'Audit de sécurité'), ('election_summary', "Résumé d'élection"), ('user_activity', 'Activité utilisateur'), ('system_health', 'Santé du système'), ('compliance', 'Conformité'), ('performance', 'Performance')], max_length=30)),
                ('template_config', models.JSONField(default=dict, verbose_name='Configuration')),
                ('query_parameters', models.JSONField(default=dict, verbose_name='Paramètres de requête')),
                ('default_format', models.CharField(choices=[('html', 'HTML'), ('pdf', 'PDF'), ('excel', 'Excel'), ('csv', 'CSV'), ('json', 'JSON')], default='html', max_length=10)),
                ('allowed_roles', models.JSONField(default=list, verbose_name='Rôles autorisés')),
                ('required_permissions', models.JSONField(default=list, verbose_name='Permissions requises')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_used', models.DateTimeField(blank=True, null=True)),
                ('usage_count', models.PositiveIntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('is_system_template', models.BooleanField(default=False)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_templates', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Template de rapport',
                'verbose_name_plural': 'Templates de rapports',
                'ordering': ['report_type', 'name'],
            },
        ),
        migrations.CreateModel(
            name='NotificationSetting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email_alerts', models.BooleanField(default=True, verbose_name='Alertes par email')),
                ('sms_alerts', models.BooleanField(default=False, verbose_name='Alertes par SMS')),
                ('browser_notifications', models.BooleanField(default=True, verbose_name='Notifications navigateur')),
                ('notify_info', models.BooleanField(default=False, verbose_name='Notifier les infos')),
                ('notify_warning', models.BooleanField(default=True, verbose_name='Notifier les avertissements')),
                ('notify_error', models.BooleanField(default=True, verbose_name='Notifier les erreurs')),
                ('notify_critical', models.BooleanField(default=True, verbose_name='Notifier les critiques')),
                ('notify_security_events', models.BooleanField(default=True, verbose_name='Événements de sécurité')),
                ('notify_election_events', models.BooleanField(default=True, verbose_name="Événements d'élection")),
                ('notify_system_events', models.BooleanField(default=False, verbose_name='Événements système')),
                ('notify_vote_events', models.BooleanField(default=True, verbose_name='Événements de vote')),
                ('quiet_hours_start', models.TimeField(blank=True, null=True, verbose_name='Début heures silencieuses')),
                ('quiet_hours_end', models.TimeField(blank=True, null=True, verbose_name='Fin heures silencieuses')),
                ('max_notifications_per_hour', models.PositiveIntegerField(default=10, verbose_name='Max notifications/heure')),
                ('alternative_email', models.EmailField(blank=True, max_length=254, verbose_name='Email alternatif')),
                ('phone_number', models.CharField(blank=True, max_length=20, verbose_name='Numéro de téléphone')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='notification_settings', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Paramètres de notification',
                'verbose_name_plural': 'Paramètres de notifications',
            },
        ),
        migrations.CreateModel(
            name='DashboardWidgetConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position_x', models.PositiveIntegerField(default=0)),
                ('position_y', models.PositiveIntegerField(default=0)),
                ('width', models.PositiveIntegerField(default=4)),
                ('height', models.PositiveIntegerField(default=4)),
                ('custom_config', models.JSONField(default=dict, verbose_name='Configuration personnalisée')),
                ('custom_title', models.CharField(blank=True, max_length=200, verbose_name='Titre personnalisé')),
                ('is_visible', models.BooleanField(default=True)),
                ('added_at', models.DateTimeField(auto_now_add=True)),
                ('dashboard', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dashboard.dashboard')),
                ('widget', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dashboard.dashboardwidget')),
            ],
            options={
                'verbose_name': 'Configuration de widget',
                'verbose_name_plural': 'Configurations de widgets',
                'unique_together': {('dashboard', 'widget')},
            },
        ),
        migrations.AddField(
            model_name='dashboard',
            name='widgets',
            field=models.ManyToManyField(through='dashboard.DashboardWidgetConfig', to='dashboard.dashboardwidget'),
        ),
        migrations.CreateModel(
            name='UserActivity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(max_length=100, verbose_name='Action')),
                ('resource', models.CharField(max_length=100, verbose_name='Ressource')),
                ('details', models.JSONField(default=dict, verbose_name='Détails')),
                ('ip_address', models.GenericIPAddressField()),
                ('user_agent', models.TextField()),
                ('session_id', models.CharField(blank=True, max_length=40)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('duration_ms', models.PositiveIntegerField(blank=True, null=True, verbose_name='Durée (ms)')),
                ('success', models.BooleanField(default=True)),
                ('error_message', models.TextField(blank=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dashboard_activities', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Activité utilisateur',
                'verbose_name_plural': 'Activités utilisateur',
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['user', 'timestamp'], name='dashboard_u_user_id_b417b6_idx'), models.Index(fields=['action', 'timestamp'], name='dashboard_u_action_6fbda0_idx')],
            },
        ),
        migrations.CreateModel(
            name='GeneratedReport',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('template_name', models.CharField(max_length=100, verbose_name='Nom du template')),
                ('generated_at', models.DateTimeField(auto_now_add=True)),
                ('report_period_start', models.DateTimeField(blank=True, null=True)),
                ('report_period_end', models.DateTimeField(blank=True, null=True)),
                ('parameters', models.JSONField(default=dict, verbose_name='Paramètres utilisés')),
                ('title', models.CharField(max_length=200, verbose_name='Titre du rapport')),
                ('content', models.TextField(verbose_name='Contenu')),
                ('format', models.CharField(max_length=10, verbose_name='Format')),
                ('file_path', models.CharField(blank=True, max_length=500, verbose_name='Chemin du fichier')),
                ('file_size_bytes', models.PositiveIntegerField(default=0)),
                ('file_hash', models.CharField(blank=True, max_length=64, verbose_name='Hash du fichier')),
                ('is_confidential', models.BooleanField(default=False)),
                ('is_archived', models.BooleanField(default=False)),
                ('archived_at', models.DateTimeField(blank=True, null=True)),
                ('access_count', models.PositiveIntegerField(default=0)),
                ('last_accessed', models.DateTimeField(blank=True, null=True)),
                ('generated_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='generated_reports', to=settings.AUTH_USER_MODEL)),
                ('shared_with', models.ManyToManyField(blank=True, related_name='shared_reports', to=settings.AUTH_USER_MODEL)),
                ('template', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='generated_reports', to='dashboard.reporttemplate')),
            ],
            options={
                'verbose_name': 'Rapport généré',
                'verbose_name_plural': 'Rapports générés',
                'ordering': ['-generated_at'],
                'indexes': [models.Index(fields=['template', 'generated_at'], name='dashboard_g_templat_7098c6_idx'), models.Index(fields=['generated_by', 'generated_at'], name='dashboard_g_generat_cdb5eb_idx')],
            },
        ),
        migrations.CreateModel(
            name='Alert',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('alert_type', models.CharField(choices=[('security_breach', 'Violation de sécurité'), ('system_error', 'Erreur système'), ('performance_issue', 'Problème de performance'), ('vote_anomaly', 'Anomalie de vote'), ('authentication_failure', "Échec d'authentification"), ('data_integrity', 'Intégrité des données'), ('system_maintenance', 'Maintenance système')], max_length=30)),
                ('title', models.CharField(max_length=200, verbose_name='Titre')),
                ('message', models.TextField(verbose_name='Message')),
                ('severity', models.CharField(choices=[('info', 'Information'), ('warning', 'Avertissement'), ('error', 'Erreur'), ('critical', 'Critique')], default='warning', max_length=20)),
                ('source_system', models.CharField(max_length=100, verbose_name='Système source')),
                ('source_details', models.JSONField(default=dict, verbose_name='Détails source')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('first_occurrence', models.DateTimeField(auto_now_add=True)),
                ('last_occurrence', models.DateTimeField(auto_now=True)),
                ('occurrence_count', models.PositiveIntegerField(default=1)),
                ('status', models.CharField(choices=[('active', 'Active'), ('acknowledged', 'Acquittée'), ('resolved', 'Résolue'), ('suppressed', 'Supprimée')], default='active', max_length=20)),
                ('acknowledged_at', models.DateTimeField(blank=True, null=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('resolution_notes', models.TextField(blank=True)),
                ('notifications_sent', models.JSONField(default=list, verbose_name='Notifications envoyées')),
                ('acknowledged_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='acknowledged_alerts', to=settings.AUTH_USER_MODEL)),
                ('resolved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resolved_alerts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Alerte',
                'verbose_name_plural': 'Alertes',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['alert_type', 'status'], name='dashboard_a_alert_t_35b164_idx'), models.Index(fields=['severity', 'created_at'], name='dashboard_a_severit_d4b835_idx')],
            },
        ),
    ]
